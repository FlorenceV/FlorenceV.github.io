{"pages":[{"title":"关于我","text":"","link":"/about1/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"css选择器","text":"除了教程中的id选择器和class选择器，另还有元素选择器、属性选择器、包含选择器、子选择器和CSS3中新增的兄弟选择器，以下带上ID选择器和类选择器一起举例。1.ID 选择器（ID selector，IS）：使用 # 标识selector，语法格式：#S{…}（S为选择器名）。例：id为name的标签会匹配下面的样式123456&lt;style&gt;#name{ color:red;}&lt;/style&gt;&lt;p id=\"name\"&gt;red text&lt;/p&gt; red text 2.类选择器（class selector，CS）：使用 . 标识selector，语法格式：.S{…}（S为选择器名）。例：class属性值为value的标签会匹配下面的样式1234567&lt;style&gt;.value{ text-align:center;}&lt;/style&gt;&lt;!--下面的文字是居中对齐的--&gt;&lt;p class=\"value\"&gt;center text&lt;/p&gt; center text 3.元素选择器（element selector，ES）：又叫标签选择器，使用标签名作为selector名，语法格式：S{…}（S为选择器名）。例：所有的p标签都会匹配以下的样式1234567&lt;style&gt;p{ font-style:italic;}&lt;/style&gt;&lt;!--下面的文字是斜体的--&gt;&lt;p style=\"font-style:italic\"&gt;italic text&lt;/p&gt; italic text 4.属性选择器（attribute selector，AS）：ES其实是AS的一个特例，在AS基础上还能对selector描述得更具体，语法格式为 E[attr[~=][|=][^=][$=][*=]VALUE]{…}，是并没有得到所有浏览器支持的选择器，因此不举例1&lt;p&gt;blank&lt;/p&gt; 5.包含选择器（package selector，PS）：指定目标选择器必须处在某个选择器对应的元素内部，语法格式：A B{…}（A、B为HTML元素/标签，表示对处于A中的B标签有效）。例：以下div内的p标签和div外的p标签分别匹配不同的样式123456789101112&lt;style&gt;p{ color:red;}div p{ color:yellow;}&lt;/style&gt;&lt;p&gt;red text&lt;/p&gt;&lt;!--文字是红色的--&gt;&lt;div&gt; &lt;p&gt;yellow text&lt;/p&gt;&lt;!--文字是黄色的--&gt;&lt;/div&gt; red text yellow text6.子选择器（sub-selector，SS）：类似于PS，指定目标选择器必须处在某个选择器对应的元素内部，两者区别在于PS允许”子标签”甚至”孙子标签”及嵌套更深的标签匹配相应的样式，而SS强制指定目标选择器作为 包含选择器对应的标签 内部的标签，语法格式：A&gt;B{…}（A、B为HTML元素/标签）。例：以下div内的p标签匹配样式，div内的table内的p不匹配123456789101112131415&lt;style&gt;div&gt;p{ color:red;}&lt;/style&gt;&lt;div&gt; &lt;p&gt;red text&lt;/p&gt;&lt;!--文字是红色的--&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt;no red text;&lt;/p&gt;&lt;!--文字是非红色的--&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt; red text no red text; 7.兄弟选择器（brother selector，BS）：BS是CSS3.0新增的一个选择器，语法格式：A~B{…}（A、B为HTML元素/标签，表示A标签匹配selector的A，B标签匹配selector的B时，B标签匹配样式）12345678910&lt;style&gt;div~p{ color:red;}&lt;/style&gt;&lt;div&gt; &lt;p&gt;no red text&lt;/p&gt;&lt;!--文字是非红色的--&gt; &lt;div&gt;no red text&lt;/div&gt; &lt;p&gt;red text&lt;/p&gt;&lt;!--文字是红色的--&gt;&lt;/div&gt; no red text no red text red text","link":"/2019/04/09/css选择器/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2018/11/27/hello-world/"},{"title":"git-ignore规则","text":".ignore忽略规则简单说明 表示此为注释,将被Git忽略.a 表示忽略所有 .a 结尾的文件!lib.a 表示但lib.a除外/TODO 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODObuild/ 表示忽略 build/目录下的所有文件，过滤整个build文件夹；doc/.txt 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt bin/: 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件/bin: 表示忽略根目录下的bin文件/.c: 表示忽略cat.c，不忽略 build/cat.cdebug/.obj: 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj/foo: 表示忽略/foo,a/foo,a/b/foo等a//b: 表示忽略a/b, a/x/b,a/x/y/b等!/bin/run.sh 表示不忽略bin目录下的run.sh文件*.log: 表示忽略所有 .log 文件config.php: 表示忽略当前路径的 config.php 文件 /mtk/ 表示过滤整个文件夹*.zip 表示过滤所有.zip文件/mtk/do.c 表示过滤某个具体文件 被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。 需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：!*.zip!/mtk/one.txt 唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：/mtk/*!/mtk/one.txt 假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！ 还有一些规则如下：fd1/*说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略； /fd1/*说明：忽略根目录下的 /fd1/ 目录的全部内容； /!.gitignore!/fw//fw/!/fw/bin/!/fw/sf/说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。","link":"/2019/03/19/git-ignore规则/"}],"tags":[{"name":"css","slug":"css","link":"/tags/css/"},{"name":"git","slug":"git","link":"/tags/git/"}],"categories":[{"name":"train","slug":"train","link":"/categories/train/"},{"name":"Git爬坑","slug":"Git爬坑","link":"/categories/Git爬坑/"}]}